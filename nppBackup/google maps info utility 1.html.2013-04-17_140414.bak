<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>google maps overlay creator</title>
	<style type="text/css">#map { width: 600px; height: 600px; border: 10px solid #000; border-radius: 9px; box-shadow: 10px 8px 5px #888888; float: left;} 
	  #info { float: left; margin: 0px 30px 30px 30px; width: 400px;}
	  #infoarea1 { width: 90%; height: 125px; border: 1px solid #000; box-shadow: 10px 8px 5px #888888; margin: 10px; }
	  #values1 { width: 350px; float: left; margin: 10px 10px 0px 10px;}
	  #latlng1 { width: 350px; float: left; margin: 10px 10px 0px 10px; }
	  #aryholder1 { height: 150px; overflow: auto; }
      .underline1 { text-decoration:underline; }
    </style>
	
	<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?v=3&libraries=drawing&sensor=false"></script>
    <script src="keydragzoom_packed.js" type="text/javascript"></script>
	<script type="text/javascript">
	
	(function() {
window.onload = function() {
  var mapDiv = document.getElementById("map");
  var poly;
  var d1 = document.getElementById( "latlngholder" );
  var d2 = document.getElementById( "zoomcenterholder" );
  var aryholder1 = document.getElementById( "aryholder" );
  var aryholderpoly1 = document.getElementById( "aryholder1" );
  var centerlatlng = new google.maps.LatLng(38.990103,-105.272741);
  var options = {
    center: centerlatlng,
    zoom: 6,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
	scaleControl: true,
	overviewMapControl: true,
	overviewMapControlOptions: { opened: true},
	draggableCursor: 'crosshair'
  };
  var map = new google.maps.Map( mapDiv, options);
  
  map.enableKeyDragZoom();
  
    document.getElementById('getValues').onclick = function() {
  	    var latandlng1 = map.getCenter() ;
         d2.innerHTML = 'Current Zoom Level = ' + map.getZoom() + '<br>' + 'Current Center = ' + latandlng1.toUrlValue() ;
         //alert('Current Zoom level = ' + map.getZoom() + '\n' + 'Current Center = ' + map.getCenter() );
}

      google.maps.event.addListener(map, 'click', function(event) {
	    latandlng = event.latLng;
        d1.innerHTML = 'Lat and Lng = ' + latandlng.toUrlValue() ;
      });

  var drawingManager = new google.maps.drawing.DrawingManager(
    {
  //drawingMode: google.maps.drawing.OverlayType.RECTANGLE, //the default is null
  drawingControl: true,
  drawingControlOptions: {
    position: google.maps.ControlPosition.TOP_CENTER,
    drawingModes: [
      google.maps.drawing.OverlayType.MARKER,
      google.maps.drawing.OverlayType.CIRCLE,
      google.maps.drawing.OverlayType.POLYGON,
      google.maps.drawing.OverlayType.POLYLINE,
      google.maps.drawing.OverlayType.RECTANGLE
    ]
  },
  markerOptions: {
    
  },
  circleOptions: {
	draggable: true,
	editable: true,
    fillColor: '#F1B85D',
    fillOpacity: .3,
    strokeWeight: 3,
    zIndex: 1,
  },
    rectangleOptions: {
	draggable: true,
	editable: true,
    fillColor: '#20FAF3',
    fillOpacity: .3,
    strokeWeight: 3,
    zIndex: 1,
  },
      polygonOptions: {
	draggable: true,
	editable: true,
    fillColor: '#3DC50B',
    fillOpacity: .3,
    strokeWeight: 3,
    zIndex: 1,
  },
        polylineOptions: {
	draggable: true,
	editable: true,
    fillColor: '#3DC50B',
    fillOpacity: .3,
    strokeWeight: 3,
    zIndex: 1,
  }
}  //end options
  );  //end drawingManager creation
  
  drawingManager.setMap(map);
  

  
          google.maps.event.addListener(drawingManager, 'overlaycomplete', function(e) {
            //all_overlays.push(e);
			
/* 			//you would use this if you wanted to be able to continuously draw certain shapes
            if (e.type != google.maps.drawing.OverlayType.MARKER) {  // Switch back to non-drawing mode after drawing a shape.
              drawingManager.setDrawingMode(null);
			}  //end if */
			
			drawingManager.setDrawingMode(null);   // Switch back to non-drawing mode after drawing a shape.
			

            // Add an event listener that selects the newly-drawn shape when the user
            // mouses down on it.
            var newShape = e.overlay;
            newShape.type = e.type;
            google.maps.event.addListener(newShape, 'click', function() {
			  if ( document.getElementById("deleter2").checked == true ) { newShape.setMap(null); document.getElementById("deleter2").checked = false}  //for deleting single shapes
				switch (newShape.type) {  //can still use e.type here too
				  case google.maps.drawing.OverlayType.CIRCLE :
					console.log( 'bounds = ' + newShape.getBounds().toUrlValue() + ' center: ' + newShape.getCenter().toUrlValue() + ' radius = ' + Math.round( newShape.getRadius() )  );
					aryholderpoly1.innerHTML = '<br>' + 'center: ' + 'new google.maps.LatLng' + '(' + newShape.getCenter().toUrlValue()  + ')' + ',' + '<br>' + 'radius: ' +  Math.round( newShape.getRadius() ) ;
					break;
				  case google.maps.drawing.OverlayType.RECTANGLE :
				  console.log(newShape.getBounds().getSouthWest().toUrlValue());
					console.log(newShape.getBounds().toUrlValue());
					var rl = '<br>' + 'new google.maps.LatLng' + '(' + newShape.getBounds().getSouthWest().toUrlValue() + ')' + ',' + '<br>' + 'new google.maps.LatLng' + '(' + newShape.getBounds().getNorthEast().toUrlValue() + ')' ;
					var ro = '<br>' + 'new google.maps.LatLngBounds(' + rl + ')' ;
					aryholderpoly1.innerHTML = ro ;
					break;
				  case google.maps.drawing.OverlayType.POLYGON :
					  //it seems there is an array of arrays here, also a lot of this is necesary to display mvcarrays
					  paths1 = newShape.getPaths();  //gets an mvcarray, after looking at this further i think getPath, with no s, would return just the array instead of the array of arrays
					  var display1 = paths1.getAt(0);  //this gets the array that holds the coordinates, there seems to only be 1 array in the array, the length of display1 will be all the coordinates of the polygon
					  var display2;  //this holds the elements of display1
					  var display2a; //this holds the strings
					  var displayary = [];  //holds the strings to display in console or screen
					  
					  for (var i=0; i < display1.length; i++) {
							display2 = display1.getAt(i);  //this dumps the coords into display2 each time around
							display2 = display2.toUrlValue();  //this converts the coords to a string
							display2a = '<br>' + 'new google.maps.LatLng' + '(' + display2 + ')'  ;
							displayary.push( display2a)  //this pushes the string coords into an array to display after the loop
							}
					  console.log(displayary);
						aryholderpoly1.innerHTML = displayary ; //this prints the coords to the screen
						break;
				  case google.maps.drawing.OverlayType.POLYLINE :
				    path2 = newShape.getPath();
					var display3;
					var display3a;
					var displayary3 = [];
					
					 for (var i=0; i < path2.length; i++) {
						display3 = path2.getAt(i);  //this dumps the coords into display2 each time around
						display3 = display3.toUrlValue();  //this converts the coords to a string
						display3a = '<br>' + 'new google.maps.LatLng' + '(' + display3 + ')'  ;
						displayary3.push( display3a)  //this pushes the string coords into an array to display after the loop
						}
				    console.log(displayary3);
					aryholderpoly1.innerHTML = displayary3;
				    break;
				  case google.maps.drawing.OverlayType.MARKER :
					console.log(newShape.getPosition().toUrlValue());
					var mholder = '<br>' + 'new google.maps.LatLng' + '(' + newShape.getPosition().toUrlValue() + ')'  ;
					aryholderpoly1.innerHTML = '<br>' + 'new google.maps.LatLng' + '(' + newShape.getPosition().toUrlValue() + ')' ;
					break;
				  default :
					  console.log("other");
				}  //end switch
			  
            });  //end inner click
            //(newShape);
			
			//this deletes all the shapes
			  google.maps.event.addDomListener(document.getElementById("deleter1"), 'click', function() {
	            newShape.setMap(null);
              }); //end button listener
  
        });  //end outer click
		
		
		//---------------------------------below is the polygon creator with delete last and delete all functionality
		
		 //create polyOptions, which gets passed to Polyline. 8-2 in maps book does all this similar but slightly  differently and is a little easier to follow
    var polyOptions = {
    strokeColor: '#000000',
    strokeOpacity: 1.0,
    strokeWeight: 3
  }
  
  //create polyline
  poly = new google.maps.Polyline(polyOptions);
  poly.setMap(map);
  
  //listener for click that runs addLatLng function, could also just use anonymous function there instead
  google.maps.event.addListener(map, 'click', addLatLng);
  
  //this is confunsing. get path which is MVCArray. add click to array. for some reason MVCArray wouldn't print to screen.
  // so had to hold the values in y. w constructs the html. i think it rewrites the whole array every click.
    function addLatLng(event) {
	  if ( document.getElementById("deleter3").checked == false ) { return;}

    var path = poly.getPath();
    path.push(event.latLng);
    var y = [];
	var w;
	
	  for (var i =0; i < path.length; i++) {
	    w = path.getAt(i);
		w = w.toUrlValue();
		w =  '<br>' + 'new google.maps.LatLng' + '(' + w + ')'  ;
        y.push( w );
      }
   aryholder1.innerHTML = y ;
  }  //end click function
  
  
  //this makes the button removes the last item from the MVCArray and rewrites the array to the screen.
    document.getElementById('remover1').onclick = function() {
    var path = poly.getPath();
    path.pop();
	var y = [];
	var w;
	
	  for (var i =0; i < path.length; i++) {
	    w = path.getAt(i);
		w = w.toUrlValue();
		w =  '<br>' + 'new google.maps.LatLng' + '(' + w + ')'  ;
        y.push( w );
      }
   aryholder1.innerHTML = y ;
}

//this clears the array so you can start over
//A.length = 0;
    document.getElementById('remover2').onclick = function() {
    var path = poly.getPath();

	var y = [];
	var w;
while (path.length > 0) {
    path.pop();
}
	
	
   aryholder1.innerHTML = y ;
}
		
  
  
}  //end onload
})();  //end self executing code encapsulating function
	
	</script>
	
	
	
	
	
  </head>
  
  
  <body>
  
    <div id="infoarea1">
	  <div id="values1">
	    <label><input type="button" value="getValues" id="getValues" />Get zoom and map center values.</label><br>
	    <span id="zoomcenterholder">Current Zoom Level = <br> Current Center = </span>
			 <br><br>
	  <em>This map supports using Shift Drag to Zoom</em>
	</div>
	<div id="latlng1">
	  <span>Get lat and lng of a click on the map.</span><br>
      <span id="latlngholder">Lat and Lng = </span>
	</div>
	
	</div>
  
    <div id="map"></div>
  
    <div id="info">
	    <h2>Google Maps Overlay code creator</h2>
		<p> Use the drawing library or the polyline creator to get useful latlng coords and code to use on Google Maps. Click on the completed shapes to get the code.
		Polyline/Polygon Creator is used when the 'hand' is selected and the checkbox is checked</p>
	    <hr>
		<h3>Drawing Library Controls</h3>
		<label><input type="button" value="Delete All" id="deleter1" />Delete all Shapes</label><br><br>
		<label><input type="checkbox" value="" id="deleter2" />While checked, select shape to delete. Automatically unchecks after click to prevent accidental deletions</label><br>
        <hr>
		<span>The Drawing Library Output = </span><div id="aryholder1"></div><br><br><br>
		
		<hr>
				<h3>Polyline/Polygon Creator</h3>
	    <p>This is useful for a polyline or polygon with many points because you can remove the last point from the polyline and array
		if you made a mistake and then continue from there. 
		The output is below under Polyline Output</p>
		<label><input type="checkbox" value="" id="deleter3" />While checked, use polyline/polygon creator</label><br>
		<label><input type="button" value="remove last" id="remover1" />remove the last plotted point</label><br>
		<label><input type="button" value="remove all" id="remover2" />remove all/start new polyline</label><br>
		
		<span>The Polyline Creator Output = </span><span id="aryholder"></span>
		<hr>
	</div>
  
  </body>
</html>